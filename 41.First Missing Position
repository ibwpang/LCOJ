public class Solution {
    public int firstMissingPositive(int[] nums) {
        int i=0;
        while(i<nums.length){
            if(nums[i]-1==i||nums[i]<=0||nums[i]>nums.length){
                i++;
            }
            else if((nums[i]-1)!=i){
                int tmp = nums[i];
                nums[i] = nums[nums[i]-1];
                nums[nums[i]-1] = tmp;
            }
        }
        int j = 0;
        while(j<nums.length&&nums[j]-1==j){
            j++;
        }
        return j+1;
    }
}

//Time O(n), space O(1)
public class Solution {
    public int firstMissingPositive(int[] A) {
    int n=A.length;
    if(n==0)
        return 1;
    int k=partition(A)+1;  k is the first position of the non-positive element.
    int temp=0;
    int first_missing_Index=k;
    for(int i=0;i<k;i++){
        temp=Math.abs(A[i]);
        if(temp<=k)
            A[temp-1]=(A[temp-1]<0)?A[temp-1]:-A[temp-1];
    }
    for(int i=0;i<k;i++){
        if(A[i]>0){
            first_missing_Index=i;
            break;
        }
    }
    return first_missing_Index+1;
}

public int partition(int[] A){
    int n=A.length;
    int q=-1;
    for(int i=0;i<n;i++){
        if(A[i]>0){
            q++;  //q will keep the position of the current first non-positive element.
            swap(A,q,i);
        }
    }
    return q;
}

public void swap(int[] A, int i, int j){
    if(i!=j){
        A[i]^=A[j];
        A[j]^=A[i];
        A[i]^=A[j];
    }
}
}
