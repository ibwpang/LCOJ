//Two pointers
public class Solution {
    public int trap(int[] height) {
        int leftmax = 0;
        int rightmax = 0;
        int a = 0;
        int b = height.length-1;
        int max = 0;
        while(a<=b){
            leftmax = Math.max(leftmax, height[a]);
            rightmax = Math.max(rightmax, height[b]);
            if(leftmax<=rightmax){
                max+=leftmax-height[a];
                a++;
            }
            else{
                max+=rightmax-height[b];
                b--;
            }
        }
        return max;
    }
}

//Stack
public class Solution {
  public int trap(int[] A) {
        if (A==null) return 0;
        Stack<Integer> s = new Stack<Integer>();
        int i = 0, maxWater = 0, maxBotWater = 0;
        while (i < A.length){
            if (s.isEmpty()||A[i]<=A[s.peek()]){ //must chech if s is empty firstly. this sentence means once we find a bar is larger, then we let the top of the stack to be bot.
                s.push(i++); //only in this if block the i can +1.
            }
            else {
                int bot = s.pop();
                maxBotWater = s.isEmpty()? // empty means no il, this sentence avoid the corner case of at the edge.
                0:(Math.min(A[s.peek()],A[i])-A[bot])*(i-s.peek()-1);
                maxWater += maxBotWater;
            }
        }
        return maxWater;
    }
}
