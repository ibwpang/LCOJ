public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        if(nums.length==0){
            return list;
        }
        Arrays.sort(nums); 
        int[] bits = new int[nums.length];
        backtrack(list, new ArrayList<Integer>(), nums, bits);
        return list;
    }
    
    public void backtrack(List<List<Integer>> list, ArrayList<Integer> templist, int[] nums, int[] bits){
        if(templist.size()==nums.length){
                list.add(new ArrayList<Integer>(templist));
                return;
        }
        for(int i=0;i<nums.length;i++){
            if((bits[i]==0||i>0)&&nums[i]==nums[i-1]&&bits[i-1]==0)  //(this element is not used || i>0) && same as the former one && the former one is not used
                continue;
            else{
                templist.add(nums[i]);
                bits[i]++;
                backtrack(list, templist, nums, bits);
                templist.remove(templist.size()-1);
                bits[i]=0;
            }
        }
        return;
    }
}
