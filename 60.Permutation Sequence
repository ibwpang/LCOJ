//------TLE-------list all the permutations,straightforward but TLE.-------------
public class Solution {
    public String getPermutation(int n, int k) {
        if(n==0||k==0){
            return null;
        }
        HashMap<Integer, String> map = new HashMap<Integer, String>();
        backtrack(map, new ArrayList<Integer>(), n, 1);
        return map.get(k);
    }
    
    public void backtrack(HashMap<Integer, String> map, ArrayList<Integer> subres, int n, int start){
        if(subres.size()==n){
            StringBuffer sb = new StringBuffer();
            for(int i:subres){
                sb.append(i);
            }
            map.put(map.size()+1, sb.toString());
            return;
        }
        for(int i=start;i<=n;i++){
            if(!subres.contains(i)){
                subres.add(i);
                backtrack(map, subres, n, 1);
                subres.remove(subres.size()-1);
            }
        }
        return;
    }
}

//???----------------O(n)-------------------
public class Solution {
    public String getPermutation(int n, int k) {
       int pos = 0;
       List<Integer> numbers = new ArrayList<>();
       int[] factorial = new int[n+1];
       StringBuilder sb = new StringBuilder();
       
       //create an array of factorial lookup
       int sum=1;
       factorial[0]=1;
       for(int i=1;i<=n;i++){
           sum*=i;
           factorial[i]=sum;
       }
       //factorial[]={1,1,2,6,24,...,n!}
       
       //create a list of numbers to get index
       for(int i=1;i<=n;i++){
           numbers.add(i);
       }
       //numbers = {1,2,3,4}
       k--;
       for(int i=1;i<=n;i++){
           int index=k/factorial[n-i];
           sb.append(String.valueOf(numbers.get(index)));
           numbers.remove(index);
           k-=index*factorial[n-i];
       }
       return String.valueOf(sb);
    }
}
