//Backtrack
public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        if(nums.length==0){
            return list;
        }
        Arrays.sort(nums);
        backtrack(list, new ArrayList<Integer>(), nums);
        return list;
    }
    
    public void backtrack(List<List<Integer>> list, ArrayList<Integer> templist, int[] nums){
        if(templist.size()==nums.length){
                list.add(new ArrayList<Integer>(templist));
                return;
        }
        for(int i=0;i<nums.length;i++){
            if(templist.size()<nums.length&&(!templist.contains(nums[i]))){
                templist.add(nums[i]);
                backtrack(list, templist, nums);
                templist.remove(templist.size()-1);
            }
        }
        return;
    }
}
