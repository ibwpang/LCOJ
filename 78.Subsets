//----Backtracking, but TLE----
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if(nums.length==0){
            return res;
        }
        for(int i=0;i<=nums.length;i++){
            backtrack(res, new ArrayList<Integer>(), nums, i, 0);
        }
        return res;
    }
    
    public void backtrack(List<List<Integer>> res, ArrayList<Integer> templist, int[] nums, int setsize, int start){
        if(templist.size()==setsize){
            res.add(new ArrayList<Integer>(templist));
            return;
        }
        for(int i=start;i<nums.length;i++){
            templist.add(nums[i]);
            backtrack(res, templist, nums, setsize, i+1);
            templist.remove(templist.size()-1);
        }
        return;
    }
}
