//----Backtracking, but TLE----
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if(nums.length==0){
            return res;
        }
        for(int i=0;i<=nums.length;i++){
            backtrack(res, new ArrayList<Integer>(), nums, i, 0);
        }
        return res;
    }
    
    public void backtrack(List<List<Integer>> res, ArrayList<Integer> templist, int[] nums, int setsize, int start){
        if(templist.size()==setsize){
            res.add(new ArrayList<Integer>(templist));
            return;
        }
        for(int i=start;i<nums.length;i++){
            templist.add(nums[i]);
            backtrack(res, templist, nums, setsize, i+1);
            templist.remove(templist.size()-1);
        }
        return;
    }
}

//Backtrack----AC----
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if(nums.length==0){
            return res;
        }
        backtrack(res, new ArrayList<Integer>(), nums, 0);
        return res;
    }
    
    public void backtrack(List<List<Integer>> res, ArrayList<Integer> templist, int[] nums, int start){
        res.add(new ArrayList<Integer>(templist));
        for(int i=start;i<nums.length;i++){
            templist.add(nums[i]);
            backtrack(res, templist, nums, i+1);
            templist.remove(templist.size()-1);
        }
    }
}

//Bit manipulation----AC----
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
       Arrays.sort(nums);
       int sets = (int)Math.pow(2, nums.length);
       
       //BitSet vector = new BitSet(nums.length);
       List<List<Integer>> res = new ArrayList<>();
       List<Integer> subset = new ArrayList<>();
       
       for(int i=0;i<sets;i++){
            subset.clear();
            for(int j=0;j<nums.length;j++){  //sets = 2^nums.length
               if((((i>>j)&1)==1)?true:false){ //means bits_vector_of_i.get(j)==true, find the 1 in bits_vector_of_i
                   subset.add(nums[j]);  //if based on my notes, nums.length-1-j will be more instinctive
               }
            }
            res.add(new ArrayList<Integer>(subset));
       }
       return res;
    }
}
