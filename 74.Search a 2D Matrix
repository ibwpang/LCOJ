//search from right top corner------------
//search row by row, then col by col, so it is relatively slow
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        if(m==0){
            return false;
        }
        int n = matrix[0].length;
        int i=0,j=n-1;
        while(i<m&&j>=0){
            if(target>matrix[i][j]){
                i++;
            }
            else if(target<matrix[i][j]){
                j--;
            }
            else if(target==matrix[i][j]){
                return true;
            }
        }
        return false;
    }
}

//search the matrix as a big "ordered" 1-D array, it is faster
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        if(m==0){
            return false;
        }
        int n = matrix[0].length;
        int start=0,end=m*n-1;
        while(start<=end){
            int mid = (start+end)/2;
            int midvalue = matrix[mid/n][mid%n];
            if(target==midvalue){
                return true;
            }
            else if(target>midvalue){
                start=mid+1;
            }
            else{
                end=mid-1;
            }
        }
        return false;
    }
}
