//Newton's method--Time: O(sqrt(n))
public class Solution {
    public int mySqrt(int s) {
        long x = s;
        while(x*x>s){
            x=(x+s/x)/2; 
        }
        return (int)x;
    }
}

//Binary Search--Time: O(logn)
public class Solution {
    public int mySqrt(int x) {
        int start = 1;
        int end = x;
        int mid = 0;
        int ans = 0; //in case when input is 0
        while(start<=end){  //need =, in case when input is 1
            mid=(start+end)/2;  //here, mid is integer!!! 
            if(mid>x/mid){
                end=mid-1;
            }
            else if(mid<x/mid){
                start=mid+1;
                ans=mid;
            }
            else if(mid==x/mid){
                return mid;
            }
        }
        return ans;
    }
}

//A Better Version of Binary Search - O(logn)
public class Solution {
    public int mySqrt(int x) {
        if(x < 0){
            return -1;
        }
        
        int start = 0; 
        int end = x;
        
        while(start + 1 < end){
            double mid = start + (end - start)/2;
            if(mid * mid > x){
                end = (int)mid;
            }
            else if(mid * mid < x){
                start = (int)mid;
            }
            else if(mid * mid == x){
                return (int)mid;
            }
        }
        
        if(end * end == x){
            return end;
        }
        
        else{
            return start;
        }
    }
}
