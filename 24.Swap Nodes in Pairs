/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 //Recursive
public class Solution {
    public ListNode swapPairs(ListNode head) {
        if ((head == null)||(head.next == null))
            return head;
        ListNode n = head.next;
        head.next = swapPairs(head.next.next);
        n.next = head;
        return n;
    }
}

//Dummy node
public ListNode swapPairs(ListNode head) {
    ListNode dummy = new ListNode(0);
    dummy.next = head;
    ListNode current = dummy;  //--!!--current is just a pointer, it just can go into the linkedlist and do some operation, but itself cannot be seen as a node.
    while (current.next != null && current.next.next != null) {
        ListNode first = current.next;   //--!!--same as current, first and second are just pointers
        ListNode second = current.next.next;
        first.next = second.next;   
        current.next = second;   //when we consider this line, we can say: the next node of the node which pointed by the "current", is the node which pointed by the "second". 
        current.next.next = first;
        current = current.next.next;
    }
    return dummy.next;  
}
