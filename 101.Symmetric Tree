/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //Iteration(using Stack)
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null){
            return true;
        }
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode left;
        TreeNode right;
        if(root.left!=null){
            if(root.right==null) return false;
            stack.push(root.left);
            stack.push(root.right);
        }
        else if(root.right!=null){
            return false;
        }
        while(!stack.isEmpty()){
            if(stack.size()%2!=0){
                return false;
            }
            right = stack.pop();
            left = stack.pop();
            if(left.val!=right.val){
                return false;
            }
            if(left.left!=null){
                if(right.right==null) return false;
                stack.push(left.left);
                stack.push(right.right);
            }
            else if(right.right!=null){
                return false;
            }
            if(left.right!=null){
                if(right.left==null) return false;
                stack.push(left.right);
                stack.push(right.left);
            }
            else if(right.left!=null){
                return false;
            }
        }
        return true;
    }
}
//Iteration (using Queue)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) {
       if(root==null){
           return true;
       }
       Queue<TreeNode> queue = new LinkedList<TreeNode>();
       queue.add(root);
       queue.add(root);
       while(!queue.isEmpty()){
           TreeNode left = queue.poll(); //return the head of the list.
           TreeNode right = queue.poll();
           if(left==null&&right==null){
               continue; //both nodes are null
           }
           if(left==null||right==null){
               return false; //one node is null
           }
           if(left.val!=right.val){
               return false;
           }
           queue.add(left.left);
           queue.add(right.right);
           queue.add(left.right);
           queue.add(right.left);
       }
       return true;
    }
}

//Recursion - 1
public class Solution {
    public boolean isSymmetric(TreeNode root) {
    return isMirror(root, root);
}

public boolean isMirror(TreeNode t1, TreeNode t2) {
    if (t1 == null && t2 == null) return true;
    if (t1 == null || t2 == null) return false;
    return (t1.val == t2.val)
        && isMirror(t1.right, t2.left)
        && isMirror(t1.left, t2.right);
}
}

//Recursion - 2
public class Solution {
    public boolean isSymmetric(TreeNode root) {
       if(root==null){
           return true;
       }
       return check(root.left, root.right);
    }
    
    public boolean check(TreeNode left, TreeNode right){
        // if(left==null || right==null)
        //     return left==right;
        if(left==null){
            if(right!=null) return false;
            else return true;
        }
        else if(right==null){
            if(left!=null) return false;
            else return true;
        }
        if(left.val!=right.val){
            return false;
        }
        return check(left.left, right.right) && check(left.right, right.left);
    }
}
