/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder == null || postorder == null || inorder.length != postorder.length){
            return null;
        }
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i = 0; i<inorder.length; i++){
            map.put(inorder[i], i);
        }
        return helper(inorder, 0, inorder.length-1, postorder, 0, postorder.length-1, map);
    }
    
    public TreeNode helper(int[] inorder, int instart, int inend, int[] postorder, int poststart, int postend, HashMap<Integer, Integer> map){
        if(poststart > postend || instart > inend){
            return null;
        }
        TreeNode root = new TreeNode(postorder[postend]);
        int inIndex = map.get(postorder[postend]);
        root.left = helper(inorder, instart, inIndex-1, postorder, poststart, poststart + inIndex-instart-1, map); //inIndex-instart is the total length of the new postorder, so poststart + inIndex-instart-1 will be the index of the end of the new postorder.
        root.right = helper(inorder, inIndex+1, inend, postorder, poststart + inIndex-instart, postend-1, map); //poststart+inIndex-instart is the new start of the postorder.
        return root;
    }
}
sodfsefd
