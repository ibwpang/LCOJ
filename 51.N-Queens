public class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                board[i][j] = '.';
            }
        }
        List<List<String>> res = new ArrayList<>();
        backtrack(board, res, 0);
        return res;
    }
    
    public void backtrack(char[][] board, List<List<String>> res, int col){
        if(col==board.length){
            res.add(construct(board));
            return;
        }
        for(int row=0;row<board.length;row++){
            if(isValid(board,row,col)){
                board[row][col]='Q';
                backtrack(board, res, col+1);
                board[row][col]='.';
            }
        }
        return;
    }
    
    public boolean isValid(char[][] board, int row, int col){
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[i].length;j++){
                if(board[i][j]=='Q'&&(row-col==i-j||row+col==i+j||row==i||col==j)){
                    return false;
                }
            }
        }
        return true;
    }
    
    public List<String> construct(char[][] board){
        List<String> subres = new ArrayList<String>();
        for(int i=0;i<board.length;i++){
            subres.add(new String(board[i]));
        }
        return subres;
    }
}
