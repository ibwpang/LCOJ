Deletion Distance

The deletion distance of two strings is the minimum number of characters you need to delete in the two strings 
in order to get the same string. For instance, the deletion distance between "heat" and "hit" is 3:
By deleting 'e' and 'a' in "heat", and 'i' in "hit", we get the string "ht" in both cases.
We cannot get the same string from both strings by deleting 2 letters or fewer.
Given the strings str1 and str2, write an efficient function deletionDistance that returns the deletion distance between them. 
Explain how your function works, and analyze its time and space complexities.

Examples:
input:  str1 = "dog", str2 = "frog"
output: 3
input:  str1 = "some", str2 = "some"
output: 0
input:  str1 = "some", str2 = "thing"
output: 9
input:  str1 = "", str2 = ""
output: 0


public class DeletionDistance {
	/*
	* Approach #1. DFS. (should be TLE). Time complexity: O(2^(n+m)). Space complexity: O(Min(n + m)).
	*/
	public static int deletionDistance(String str1, String str2) {
		return helper(str1, str2, 0, 0);
	}

	public static int helper(String str1, String str2, int start1, int start2) {
		if (start1 == str1.length()) {
			return str2.length() - start2;
		}
		if (start2 == str2.length()) {
			return str1.length() - start1;
		}

		if (str1.charAt(start1) != str2.charAt(start2)) {
			return 1 + Math.min(helper(str1, str2, start1 + 1, start2), helper(str1, str2, start1, start2 + 1));
		} else {
			return helper(str1, str2, start1 + 1, start2 + 1);
		}
	}

	public static void main(String[] args) {
		String str1 = "abdf";
		String str2 = "ebcd";
		int ans = deletionDistance(str1, str2);
		System.out.println(ans);
	}
}


public class DeletionDistance {
	/*
	* Approach #2. Memorized Search. Time complexity: O(n*m) < O(?) < O(2^(n+m)), Space complexity: O(n*m).
	*/
	public static int deletionDistance(String str1, String str2) {
		//memo[i][j] means the deletion distance between str1.substring(i) and str2.substring(j).
		Integer[][] memo = new Integer[str1.length() + 1][str2.length() + 1];
		return helper(str1, str2, 0, 0, memo);
	}

	public static int helper(String str1, String str2, int start1, int start2, Integer[][] memo) {
		if (memo[start1][start2] != null) {
			return memo[start1][start2];
		}

		if (start1 == str1.length()) {
			memo[start1][start2] = str2.length() - start2;
			return memo[start1][start2];
		}
		if (start2 == str2.length()) {
			memo[start1][start2] = str1.length() - start1;
			return memo[start1][start2];
		}

		if (str1.charAt(start1) != str2.charAt(start2)) {
			memo[start1][start2] = 1 + Math.min(helper(str1, str2, start1 + 1, start2, memo), 
							    helper(str1, str2, start1, start2 + 1, memo));
			return memo[start1][start2];
		} else {
			memo[start1][start2] = helper(str1, str2, start1 + 1, start2 + 1, memo);
			return memo[start1][start2];
		}
	}

	public static void main(String[] args) {
		String str1 = "abcd";
		String str2 = "thegiantdown";
		int ans = deletionDistance(str1, str2);
		System.out.println(ans);
	}
}


public class DeletionDistance {
	/*
	* Approach #3-1. DP. Time complexity: O(n * m). Space complexity: O(n * m).
	*/
	public static int deletionDistance(String str1, String str2) {
		int len1 = str1.length();
		int len2 = str2.length();

		//State
		int[][] f = new int[len1 + 1][len2 + 1];

		//Function
		for (int i = 0; i <= len1; i++) {
			for (int j = 0; j <= len2; j++) {
				if (i == 0) {
					f[0][j] = j;
				} else if (j == 0) {
					f[i][0] = i;
				} else if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
					f[i][j] = f[i - 1][j - 1];
				} else {
					f[i][j] = Math.min(f[i][j - 1], f[i - 1][j]) + 1;
				}
			}
		}

		//Answer
		return f[len1][len2];
	}

	public static void main(String[] args) {
		String str1 = "ebdf";
		String str2 = "abcd";
		int ans = deletionDistance(str1, str2);
		System.out.println(ans);
	}
}



public class DeletionDistance {
	/*
	* Approach #3-2.Reduce Space Complexity. Time complexity: O(n * m). Space complexity: O(m).
	*/
	public static int deletionDistance(String str1, String str2) {
		int len1 = str1.length();
		int len2 = str2.length();

		//State
		int[][] f = new int[2][len2 + 1];

		//Function
		for (int i = 0; i <= len1; i++) {
			for (int j = 0; j <= len2; j++) {
				if (i == 0) {
					f[0][j] = j;
				} else if (j == 0) {
					f[i % 2][0] = i;
				} else if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
					f[i % 2][j] = f[(i - 1) % 2][j - 1];
				} else {
					f[i % 2][j] = Math.min(f[i % 2][j - 1], f[(i - 1) % 2][j]) + 1;
				}
			}
		}

		//Answer
		return f[len1 % 2][len2];
	}

	public static void main(String[] args) {
		String str1 = "ebdf";
		String str2 = "abcd";
		int ans = deletionDistance(str1, str2);
		System.out.println(ans);
	}
}
