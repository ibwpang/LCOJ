//Back-tracking
public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(list, new ArrayList<Integer>(), candidates, target, 0);
        return list;
    }
    
    public void backtrack(List<List<Integer>> list, List<Integer> templist, int[] nums, int remain, int start){
        //templist is used for storing each kind of combination.
        if(remain<0){ //this is the condition of the backtrack
            return;
        }
        else if(remain==0){//this is the condition of the backtrack
            list.add(new ArrayList<>(templist));
            return;
        }
        else{
            for(int i=start;i<nums.length;i++){ //using i=start we can get combination result, not permutation result.
                templist.add(nums[i]);
                backtrack(list, templist, nums, remain-nums[i], i);//start is not i+1 because we can reuse the same elements.This also means we cannot use a candidate less than the one before it in templist.
                templist.remove(templist.size()-1);//remove the current one and try next element.
            }
        }
    }
}
