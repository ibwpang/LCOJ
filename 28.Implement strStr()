//Approach #1 - using substring() - beat 93%
public class Solution {
    public int strStr(String haystack, String needle) {
       if(haystack.length()<needle.length()){
           return -1;
       }
       else{
           int l1=haystack.length();
           int l2=needle.length();
           int diff=l1-l2;
           for(int i=0;i<=diff;i++){
               if(haystack.substring(i,i+l2).equals(needle)){
                   return i;
               }
           }
           return -1;
       }
    }
}

//Approach #2 - using two pointers - beat 8%
public class Solution {
    public int strStr(String haystack, String needle) {
        for (int i = 0; i<=haystack.length(); i++) {
            for (int j = 0; j<=needle.length(); j++) {
                //The order of this three if is very important.
             if (j == needle.length())  //j==needle.length()-1 is not enough, cause the char at needle.length() has not been checked yet.
                return i; //j is the pointer for needle. When this if is true, it means there is a needle in the haystack.
             if (i + j >= haystack.length()) 
                return -1; //i+j is the pointer for haystack. When this if is true, it means the haystack has already traversed over, but there is still not a needle find in haystack.
             if (needle.charAt(j) != haystack.charAt(i + j)) 
                break; //the first char of needle is not same as the i th char of haystack, so we skip to next char of haystack.
            }
        }
        return 0;
    }
}
