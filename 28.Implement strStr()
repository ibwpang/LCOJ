//Approach #1 - using substring() - beat 93%
public class Solution {
    public int strStr(String haystack, String needle) {
       if(haystack.length()<needle.length()){
           return -1;
       }
       else{
           int l1=haystack.length();
           int l2=needle.length();
           int diff=l1-l2;
           for(int i=0;i<=diff;i++){
               if(haystack.substring(i,i+l2).equals(needle)){
                   return i;
               }
           }
           return -1;
       }
    }
}

//Approach #2 - using two pointers - beat 8%
public class Solution {
    public int strStr(String haystack, String needle) {
        for (int i = 0; i<=haystack.length(); i++) {
            for (int j = 0; j<=needle.length(); j++) {
                //The order of this three if is very important.
             if (j == needle.length())  //j==needle.length()-1 is not enough, cause the char at needle.length() has not been checked yet.
                return i; //j is the pointer for needle. When this if is true, it means there is a needle in the haystack.
             if (i + j >= haystack.length()) 
                return -1; //i+j is the pointer for haystack. When this if is true, it means the haystack has already traversed over, but there is still not a needle find in haystack.
             if (needle.charAt(j) != haystack.charAt(i + j)) 
                break; //the first char of needle is not same as the i th char of haystack, so we skip to next char of haystack.
            }
        }
        return 0;
    }
}

//Approach #3 - Rabin Karp Algorithm - using hash function - beat 44%
public class Solution {
    
    public int BASE = 1000000;
    
    public int strStr(String haystack, String needle) {
        if(haystack==null||needle==null){
            return -1;
        }
        int m = needle.length();
        int n = haystack.length();
        if(m==0){
            return 0;
        }
        
        int power = 1;
        for(int i = 0; i<m; i++){
            power = (power*31)%BASE;//get 31^m
        }
        //power = power % BASE;
        
        int targetCode = 0;
        for(int i = 0; i<m; i++){
            targetCode = (targetCode*31+needle.charAt(i))%BASE; //get hash code of needle.
        }
        
        int hashCode = 0;
        for(int i = 0; i<n; i++){
            //abc+d
            hashCode = (hashCode*31 + haystack.charAt(i))%BASE;
            
            if(i<m-1){
                continue; //get to at least m length firstly
            }
            
            //abcd-a
            if(i>=m){
                hashCode = hashCode - (haystack.charAt(i-m)*power)%BASE;
                if(hashCode<0){
                    hashCode += BASE; //we need check when two positive numbers substract
                 }
            }
            
            //check
            if(hashCode==targetCode){
                if(haystack.substring(i-m+1, i+1).equals(needle)){
                    //compare each char
                    return i-m+1; //i-(m-1) is the beginning of the substring in haystack
                }
            }
            else{
                continue;
            }
        }
        return -1;
    }
}
